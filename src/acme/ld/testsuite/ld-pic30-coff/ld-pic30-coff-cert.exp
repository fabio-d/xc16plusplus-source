#testsuite> runtest --tool=ld --target=pic30-*-* --tool_exec /cygdrive/c/pic30_tools/bin ./ld-pic30-coff/ld-pic30-coff-cert.exp --verbose

###############################################################################
#
# This is the certification test suite for ld on the pic30 target.
#
# Certification tests by Jason Kajita.
#

#
# Implemented Procedures:
#    slurp_options { file }           : Used to read options from .d file
#
#    regexp_diff { file_1 file_2 }    : Compares two files, line by line
#
#    run_stdout_test { name cmdopts } : Runs tests to verify that linker
#                                       produces expected stdout
#
#    run_stderr_test { name cmdopts } : Runs tests to verify that linker
#                                       produces expected stderr
#
#    run_map_test { name cmdopts }    : Runs tests to verify that linker
#                                       produces expected map file
#
#    run_dump_test { name }           : Links one or more files, runs a
#                                       utility on the output file, and
#                                       compares the utility's textual
#                                       output to expected regular
#                                       expressions
#


global AS
if ![info exists AS] then {
    set AS [findfile $base_dir/../pic30-as "../pic30-as" [transform as]]
}

global GASP
if ![info exists GASP] then {
    set GASP [findfile $base_dir/../pic30-gasp "../pic30-gasp" [transform gasp]]
}

global ASFLAGS
if ![info exists ASFLAGS] then {
    set ASFLAGS ""
}

if ![info exists OBJDUMP] then {
    set OBJDUMP [findfile $base_dir/../../binutils/pic30-objdump \
                 $base_dir/../../binutils/pic30-objdump \
                 [transform objdump]]
}

if ![info exists OBJDUMPFLAGS] then {
    set OBJDUMPFLAGS {}
}

if ![info exists NM] then {
    set NM [findfile $base_dir/../../binutils/pic30-nm \
               $base_dir/../../binutils/pic30-nm \
               [transform nm]]
}

if ![info exists NMFLAGS] then {
    set NMFLAGS {}
}

if ![info exists OBJCOPY] then {
    set OBJCOPY [findfile $base_dir/../../binutils/pic30-objcopy]
}

if ![info exists OBJCOPYFLAGS] then {
    set OBJCOPYFLAGS {}
}

if ![info exists READELF] then {
    set READELF [findfile $base_dir/../../binutils/pic30-readelf]
}

if ![info exists READELFFLAGS] then {
    set READELFFLAGS {}
}

proc slurp_options { file } {
    if [catch { set f [open $file r] } x] {
     #perror "couldn't open `$file': $x"
     perror "$x"
     return -1
    }
    set opt_array {}
    # whitespace expression
    set ws  {[      ]*}
    set nws {[^     ]*}
    # whitespace is ignored anywhere except within the options list;
    # option names are alphabetic only
    set pat "^#${ws}(\[a-zA-Z\]*)$ws:${ws}(.*)$ws\$"
    while { [gets $f line] != -1 } {
     set line [string trim $line]
     # Whitespace here is space-tab.
     if [regexp $pat $line xxx opt_name opt_val] {
         # match!
         lappend opt_array [list $opt_name $opt_val]
     } else {
         break
     }
    }
    close $f
    return $opt_array
}


# regexp_diff, based on simple_diff taken from ld test suite
#    compares two files line-by-line
#    file1 contains strings, file2 contains regexps and #-comments
#    blank lines are ignored in either file
#    returns non-zero if differences exist
#
proc regexp_diff { file_1 file_2 } {

    set eof -1
    set end_1 0
    set end_2 0
    set differences 0
    set diff_pass 0

    if [file exists $file_1] then {
     set file_a [open $file_1 r]
    } else {
     warning "$file_1 doesn't exist"
     return 1
    }

    if [file exists $file_2] then {
     set file_b [open $file_2 r]
    } else {
     fail "$file_2 doesn't exist"
     close $file_a
     return 1
    }

    verbose " Regexp-diff'ing: $file_1 $file_2" 2

    while { 1 } {
     set line_a ""
     set line_b ""
     while { [string length $line_a] == 0 } {
         if { [gets $file_a line_a] == $eof } {
          set end_1 1
          break
         }
     }
     while { [string length $line_b] == 0 || [string match "#*" $line_b] } {
         if [ string match "#pass" $line_b ] {
          set end_2 1
          set diff_pass 1
          break
         } elseif [ string match "#..." $line_b ] {
          if { [gets $file_b line_b] == $eof } {
              set end_2 1
              break
          }
          verbose "looking for \"^$line_b$\"" 3
          while { ![regexp "^$line_b$" "$line_a"] } {
              verbose "skipping    \"$line_a\"" 3
              if { [gets $file_a line_a] == $eof } {
               set end_1 1
               break
              }
          }
          break
         }
         if { [gets $file_b line_b] == $eof } {
          set end_2 1
          break
         }
     }

        if { $diff_pass } {
            break
        } elseif { $end_1 && $end_2 } {
            break
        } elseif { $end_1 } {
            send_log "extra regexps in $file_2 starting with \"^$line_b$\"\nEOF from $file_1\n"
            verbose "extra regexps in $file_2 starting with \"^$line_b$\"\nEOF from $file_1" 3
            set differences 1
            break
        } elseif { $end_2 } {
            send_log "extra lines in $file_1 starting with \"^$line_a$\"\nEOF from $file_2\n"
            verbose "extra lines in $file_1 starting with \"^$line_a$\"\nEOF from $file_2\n" 3
            set differences 1
            break
        } else {
            verbose "regexp \"^$line_b$\"\nline   \"$line_a\"" 3
            if ![regexp "^$line_b$" "$line_a"] {
          send_log "regexp_diff match failure\n"
          send_log "regexp \"^$line_b$\"\nline   \"$line_a\"\n"
          set differences 1
            }
        }
    }

    if { $differences == 0 && !$diff_pass && [eof $file_a] != [eof $file_b] } {
     send_log "$file_1 and $file_2 are different lengths\n"
     verbose "$file_1 and $file_2 are different lengths" 3
     set differences 1
    }

    close $file_a
    close $file_b

    return $differences
}

# This proc  verifies that the linker generates  the expected standard
# out.

# Usage: run_stdout_test dfile "cmdopts"
#        where dfile is the *.d file containing the expected stdout
#        and cmdopts is any additional command-line option(s) not
#            specified in the .d file.
#
proc run_stdout_test { name cmdopts } {
     global subdir
     global srcdir
     global LD
     global target

     # Parse the options from the .d file.
     if [string match "*/*" $name] {
          set file $name
          set name [file tail $name]
     } else {
          set file "$srcdir/$subdir/$name"
     }
     set opt_array [slurp_options "${file}.d"]
     if { $opt_array == -1 } {
          perror "error reading options for $file.d"
          unresolved $subdir/$name
          return
     }

     set opts(ld) {}
     set opts(name) {}
     set opts(PROG) {}
     set opts(objects) {}

     foreach i $opt_array {
          set opt_name [lindex $i 0]
          set opt_val [lindex $i 1]
          if ![info exists opts($opt_name)] {
               perror "unknown option $opt_name in file $file.d"
               unresolved $subdir/$name
               return
          }
          if [string length $opts($opt_name)] {
               perror "option $opt_name multiply set in $file.d"
               unresolved $subdir/$name
               return
          }
          set opts($opt_name) $opt_val
     }

     if { $opts(name) == "" } {
          set testname "$subdir/$name"
     } else {
          set testname $opts(name)
     }

     if { $opts(objects) == "" } {
          set objectfiles ${file}.out
     } else {
          set objectfiles $opts(objects)
          regsub -all "/ld-pic30-coff/" $objectfiles " $srcdir/$subdir/" objectfiles
     }

     #
     # Run the linker with the specified options and object files.
     #
     send_log "$LD $opts(ld) $cmdopts -o $srcdir/$subdir/tmpdir/$name.o $objectfiles\n"
     catch "exec $srcdir/$subdir/lib/run $LD $opts(ld) $cmdopts -o $srcdir/$subdir/tmpdir/$name.o $objectfiles \> $srcdir/$subdir/tmpdir/$name.stdout" comp_output

     # If the linker reports errors or warnings, the test failed.
     set comp_output [prune_warnings $comp_output]
     if ![string match "" $comp_output] then {
          send_log "$comp_output\n"
          verbose "$comp_output" 3
          fail $testname
          return
     }

     if {[regexp_diff $srcdir/$subdir/tmpdir/$name.stdout $file.d]} then {

          # If the stdout  file did not match the  expected output, we
          # know that the test failed.  We should keep the stdout file
          # for later inspection.

          fail $testname
     } else {

          # If the  stdout file matches  the expected output,  we know
          # that  the test  passed.   We can  clean  up the  temporary
          # files.

          pass $testname
          catch "exec $srcdir/$subdir/lib/run rm -f $srcdir/$subdir/tmpdir/$name.stdout" comp_output
          if ![string match "" $comp_output] then {
               send_log "$comp_output\n"
               verbose "$comp_output" 3
          }
          catch "exec $srcdir/$subdir/lib/run rm -f $srcdir/$subdir/tmpdir/$name.o" comp_output
          if ![string match "" $comp_output] then {
               send_log "$comp_output\n"
               verbose "$comp_output" 3
          }
     }
}

#    This  proc  verifies  that  the  linker  generates  the  expected
# standard error.
#
# Usage: run_stderr_test dfile "cmdopts"
#        where dfile is the *.d file containing the expected stderr
#        and cmdopts is any additional command-line option(s) not
#            specified in the .d file.
#
proc run_stderr_test { name cmdopts } {
     global subdir
     global srcdir
     global LD
     global target

     # Parse the options from the .d file.
     if [string match "*/*" $name] {
          set file $name
          set name [file tail $name]
     } else {
          set file "$srcdir/$subdir/$name"
     }
     set opt_array [slurp_options "${file}.d"]
     if { $opt_array == -1 } {
          perror "error reading options for $file.d"
          unresolved $subdir/$name
          return
     }

     set opts(ld) {}
     set opts(name) {}
     set opts(PROG) {}
     set opts(objects) {}

     foreach i $opt_array {
          set opt_name [lindex $i 0]
          set opt_val [lindex $i 1]
          if ![info exists opts($opt_name)] {
               perror "unknown option $opt_name in file $file.d"
               unresolved $subdir/$name
               return
          }
          if [string length $opts($opt_name)] {
               perror "option $opt_name multiply set in $file.d"
               unresolved $subdir/$name
               return
          }
          set opts($opt_name) $opt_val
     }

     if { $opts(name) == "" } {
          set testname "$subdir/$name"
     } else {
          set testname $opts(name)
     }

     if { $opts(objects) == "" } {
          set objectfiles ${file}.out
     } else {
          set objectfiles $opts(objects)
          regsub -all "/ld-pic30-coff/" $objectfiles " $srcdir/$subdir/" objectfiles
     }

     #
     # Run the linker with the specified options and object files.
     #
     send_log "$LD $opts(ld) $cmdopts -o $srcdir/$subdir/tmpdir/$name.o $objectfiles\n"
     catch "exec $srcdir/$subdir/lib/run $LD $opts(ld) $cmdopts -o $srcdir/$subdir/tmpdir/$name.o $objectfiles 2> $srcdir/$subdir/tmpdir/$name.stderr" comp_output
     set comp_output [prune_warnings $comp_output]
     verbose "output was $comp_output"

     if {[regexp_diff $srcdir/$subdir/tmpdir/$name.stderr $file.d]} then {

          # If the stdout  file did not match the  expected output, we
          # know that the test failed.  We should keep the stdout file
          # for later inspection

          fail $testname
     } else {

          # If the  stdout file matches  the expected output,  we know
          # that  the test  passed.   We can  clean  up the  temporary
          # files.

          pass $testname
          catch "exec $srcdir/$subdir/lib/run rm -f $srcdir/$subdir/tmpdir/$name.stderr" comp_output
          if ![string match "" $comp_output] then {
               send_log "$comp_output\n"
               verbose "$comp_output" 3
          }
          catch "exec $srcdir/$subdir/lib/run rm -f $srcdir/$subdir/tmpdir/$name.o" comp_output

          if ![string match "" $comp_output] then {
               send_log "$comp_output\n"
               verbose "$comp_output" 3

          }
     }
}
# End run_stderr_test

#
# This proc verifies that the linker generates the expected map file.
# Usage: run_map_test dfile "cmdopts"
#        where dfile is the *.d file containing the expected stdout
#        and cmdopts is any additional command-line option(s) not
#            specified in the .d file.
#
proc run_map_test { name cmdopts } {
     global subdir
     global srcdir
     global LD
     global target

     # Parse the options from the .d file.
     if [string match "*/*" $name] {
          set file $name
          set name [file tail $name]
     } else {
          set file "$srcdir/$subdir/$name"
     }
     set opt_array [slurp_options "${file}.d"]
     if { $opt_array == -1 } {
          perror "error reading options for $file.d"
          unresolved $subdir/$name
          return
     }

     set opts(ld) {}
     set opts(name) {}
     set opts(PROG) {}
     set opts(objects) {}

     foreach i $opt_array {
          set opt_name [lindex $i 0]
          set opt_val [lindex $i 1]
          if ![info exists opts($opt_name)] {
               perror "unknown option $opt_name in file $file.d"
               unresolved $subdir/$name
               return
          }
          if [string length $opts($opt_name)] {
               perror "option $opt_name multiply set in $file.d"
               unresolved $subdir/$name
               return
          }
          set opts($opt_name) $opt_val
     }

     if { $opts(name) == "" } {
          set testname "$subdir/$name"
     } else {
          set testname $opts(name)
     }

     if { $opts(objects) == "" } {
          set objectfiles ${file}.out
     } else {
          set objectfiles $opts(objects)
          regsub -all "/ld-pic30-coff/" $objectfiles " $srcdir/$subdir/" objectfiles

    }

     #
     # Run the linker with the specified options and object files.
     #
     send_log "$LD $opts(ld) $cmdopts -Map $srcdir/$subdir/tmpdir/$name.map -o $srcdir/$subdir/tmpdir/$name.o $objectfiles\n"
     catch "exec $srcdir/$subdir/lib/run $LD $opts(ld) $cmdopts -Map $srcdir/$subdir/tmpdir/$name.map -o $srcdir/$subdir/tmpdir/$name.o $objectfiles " comp_output

     # If the linker reports errors or warnings, the test failed.
     set comp_output [prune_warnings $comp_output]
     if ![string match "" $comp_output] then {
          send_log "$comp_output\n"
          verbose "$comp_output" 3
          fail $testname
          return
     }

     if {[regexp_diff $srcdir/$subdir/tmpdir/$name.map $file.d]} then {

          # If the stdout  file did not match the  expected output, we
          # know that  the test failed.   We should keep the  map file
          # for later inspection.

          fail $testname
     } else {

          # If the  stdout file matches  the expected output,  we know
          # that  the test  passed.   We can  clean  up the  temporary
          # files.

          pass $testname
          catch "exec $srcdir/$subdir/lib/run rm -f $srcdir/$subdir/tmpdir/$name.map" comp_output
          if ![string match "" $comp_output] then {
               send_log "$comp_output\n"
               verbose "$comp_output" 3
          }
          catch "exec $srcdir/$subdir/lib/run rm -f $srcdir/$subdir/tmpdir/$name.o" comp_output
          if ![string match "" $comp_output] then {
               send_log "$comp_output\n"
               verbose "$comp_output" 3
          }
     }
}
# end run_map_test

#
# run_dump_test FILE
#
#    Link one  or more  .out files,  then run some  utility on  it and
# check the output.
#
#    There should  link one or  more preassembled object files  in the
# test   suite  directory,   and   a  pattern   file  called   FILE.d.
# `run_dump_test' will  link the files, run some  tool like `objdump',
# `objcopy', or  `nm' on  the .o file  to produce textual  output, and
# then  analyze that  with regexps.   The FILE.d  file  specifies what
# program to run, and what to expect in its output.
#
#    The  FILE.d file  begins with  zero or  more option  lines, which
# specify flags to  pass to the assembler, the program  to run to dump
# the assembler's output, and the  options it wants.  The option lines
# have the syntax:
#
#         OPTION: VALUE
#
#    OPTION is the name of  some option, like "name" or "objdump", and
# VALUE  is OPTION's value.   The valid  options are  described below.
# Whitespace is  ignored everywhere, except within  VALUE.  The option
# list ends  with the first line  that doesn't match  the above syntax
# (hmm, not great for error detection).
# The interesting options are:
#
#   name: TEST-NAME
#    The  name of  this test,  passed to  DejaGNU's `pass'  and `fail'
# commands.  If  omitted, this  defaults to FILE,  the root of  the .d
# filename.
#
#   ld: FLAGS
#   When linking object files, pass FLAGS to the linker.
#
#   PROG: PROGRAM-NAME
#
#    The name of the program to run to analyze the .o file produced by
# the assembler.  This can  be omitted; run_dump_test will guess which
# program  to  run by  seeing  which of  the  flags  options below  is
# present.
#
#   objdump: FLAGS
#   nm: FLAGS
#   objcopy: FLAGS
#
#    Use the  specified program  to analyze the  .o file, and  pass it
# FLAGS, in addition to the .o file name.
#
#   objects: OBJECTFILES
#
#    Link  the  files  OBJECTFILES.   If  omitted,  this  defaults  to
# FILE.out.  This is  useful if several .d files want  to share a .out
# file.
#
#    Each option may occur at most  once.
#
#    After the option lines  come regexp lines.  `run_dump_test' calls
# `regexp_diff' to compare the output  of the dumping tool against the
# regexps in FILE.d.  `regexp_diff' is defined later in this file; see
# further comments there.
#

proc run_dump_test { name } {
    global subdir srcdir
    global OBJDUMP NM AS OBJCOPY READELF LD
    global OBJDUMPFLAGS NMFLAGS ASFLAGS OBJCOPYFLAGS READELFFLAGS LDFLAGS
    global host_triplet

    if [string match "*/*" $name] {
     set file $name
     set name [file tail $name]
    } else {
     set file "$srcdir/$subdir/$name"
    }
    set opt_array [slurp_options "${file}.d"]
    if { $opt_array == -1 } {
     perror "error reading options from $file.d"
     unresolved $subdir/$name
     return
    }
    set opts(ld) {}
    set opts(objdump) {}
    set opts(nm) {}
    set opts(objcopy) {}
    set opts(readelf) {}
    set opts(name) {}
    set opts(PROG) {}
    set opts(objects) {}

    foreach i $opt_array {
     set opt_name [lindex $i 0]
     set opt_val [lindex $i 1]
     if ![info exists opts($opt_name)] {
         perror "unknown option $opt_name in file $file.d"
         unresolved $subdir/$name
         return
     }
     if [string length $opts($opt_name)] {
         perror "option $opt_name multiply set in $file.d"
         unresolved $subdir/$name
         return
     }
     set opts($opt_name) $opt_val
    }

    if {$opts(PROG) != ""} {
     switch -- $opts(PROG) {
         objdump
          { set program objdump }
         nm
          { set program nm }
         objcopy
          { set program objcopy }
         readelf
          { set program readelf }
         default
          { perror "unrecognized program option $opts(PROG) in $file.d"
            unresolved $subdir/$name
            return }
     }
    } else {
     # Guess which program to run, by seeing which option was specified.
     set program ""
     foreach p {objdump objcopy nm readelf} {
         if {$opts($p) != ""} {
          if {$program != ""} {
              perror "ambiguous dump program in $file.d"
              unresolved $subdir/$name
              return
          } else {
              set program $p
          }
         }
     }
     if {$program == ""} {
         perror "dump program unspecified in $file.d"
         unresolved $subdir/$name
         return
     }
    }

    set progopts1 $opts($program)
    eval set progopts \$[string toupper $program]FLAGS
    eval set binary \$[string toupper $program]
    if { $opts(name) == "" } {
     set testname "$subdir/$name"
    } else {
     set testname $opts(name)
    }

     if { $opts(objects) == "" } {
          set objectfiles ${file}.out
     } else {
          set objectfiles $opts(objects)
          regsub -all "/ld-pic30-coff/" $objectfiles " $srcdir/$subdir/" objectfiles
    }

     #
     # Run the linker with the specified options and object files.
     #
     send_log "$LD $opts(ld) -o $srcdir/$subdir/tmpdir/$name.o $objectfiles\n"
     catch "exec $srcdir/$subdir/lib/run $LD $opts(ld) -o $srcdir/$subdir/tmpdir/$name.o $objectfiles " comp_output

    set comp_output [prune_warnings $comp_output]

    if ![string match "" $comp_output] then {
     send_log "$comp_output\n"
     verbose "$comp_output" 3
     #fail $testname
     #return
    }

    if { [which $binary] == 0 } {
     untested $testname
     return
    }

    if { $progopts1 == "" } { set $progopts1 "-r" }
    verbose "running $binary $progopts $progopts1" 3

    # Objcopy, unlike the other two,  won't send its output to stdout,
    # so we have to run it specially.

    if { $program == "objcopy" } {
     send_log "$binary $progopts $progopts1 $srcdir/$subdir/tmpdir/$name.o $srcdir/$subdir/tmpdir/$name.dump\n"
     catch "exec $binary $progopts $progopts1 $srcdir/$subdir/tmpdir/$name.o $srcdir/$subdir/tmpdir/$name.dump" comp_output
     set comp_output [prune_warnings $comp_output]
     if ![string match "" $comp_output] then {
         send_log "$comp_output\n"
         fail $testname
         return
     }
    } else {
     send_log "$binary $progopts $progopts1 $srcdir/$subdir/tmpdir/$name.o > $srcdir/$subdir/tmpdir/$name.dump\n"
     catch "exec $binary $progopts $progopts1 $srcdir/$subdir/tmpdir/$name.o > $srcdir/$subdir/tmpdir/$name.dump" comp_output
     set comp_output [prune_warnings $comp_output]
     if ![string match "" $comp_output] then {
         send_log "$comp_output\n"
         fail $testname
         return
     }
    }

    #verbose_eval {[file_contents $srcdir/$subdir/tmpdir/$name.dump"]} 3
    if { [regexp_diff "$srcdir/$subdir/tmpdir/$name.dump" "${file}.d"] } then {
     fail $testname
     #verbose "output is [file_contents "$name.dump"]" 2
     return
    }

    pass $testname
    catch "exec $srcdir/$subdir/lib/run rm $srcdir/$subdir/tmpdir/$name.dump" comp_output
    catch "exec $srcdir/$subdir/lib/run rm $srcdir/$subdir/tmpdir/$name.o" comp_output
}

######################################################################
#
#	        LD Certifiction tests for PIC30 target.
#
######################################################################

if [istarget pic30-*-*] {

     #    Run make on "asmsource" to make sure that we have the object
     # files created with the latest version of the assembler.

     catch "exec make -i -C $srcdir/$subdir/asmsource" comp_output
     send_log "$comp_output\n"
     verbose "$comp_output" 3

if (1) {

     run_stderr_test ssr_20978a ""

     run_dump_test ssr_19051

     run_map_test ssr_19210 ""

     run_dump_test ssr_21573


     #    This  test  verifies  that  the linker  displays  versioning
     # information   when   we  use   the   -V  command-line   option.
     # Certification test 47.

     run_stdout_test mchpVersion ""

     #    This  test verifies  that the  linker displays  the expected
     # help screen when we use the --help option.

     run_stdout_test mchpHelp ""

     #    This  test verifies  that the  linker displays  the expected
     # target-  specific help  screen  when we  use the  --target-help
     # option.

     run_stdout_test mchpTargetHelp ""

     #    This test verifies that the linker generates a map file when
     # linking a simple .out file with the -Map command-line option.

     run_map_test map1 ""

     #    This test  verifies that the linker generates  an error when
     # the object files to be linked do not exist.

     run_stderr_test noFile ""
}

if (1) {

		########## RELOCATION TESTS ##########

     #    This  test  verifies that  the  linker handles  BIT_SELECT_3
     # relocations.

     run_dump_test cert0401a
     run_stderr_test cert0401c ""


     #    This  test  verifies that  the  linker handles  BIT_SELECT_4
     # relocations.

     run_dump_test cert0402a


     #    This test verifies that the linker handles BIT_SELECT_4_BYTE
     # relocations.

     run_dump_test cert0403a


     #    This test  verifies that the  linker handles BRANCH_ABSOLUTE
     # relocations.

     run_dump_test cert0404a

     #    This  test  verifies  that  the linker  handles  DO_ABSOLUTE
     # relocations.

     run_dump_test cert0405a

     #    This   test  verifies  that   the  linker   handles  TBLPAGE
     # relocations.

     run_dump_test cert0406a

     #    This   test   verifies  that   the   linker  handles   DSP_5
     # relocations.

     run_dump_test cert0407a

     #    This  test  verifies that  the  linker handles  DSP_PRESHIFT
     # relocations.

     run_dump_test cert0408a

     #    This  test  verifies  that  the  linker  handles  FRAME_SIZE
     # relocations.

     run_dump_test cert0409a

     #    This   test  verifies   that  the   linker   handles  HANDLE
     # relocations.

     run_dump_test cert0410a

     #    This  test  verifies  that  the  linker  handles  LOOP_COUNT
     # relocations.

     run_dump_test cert0411a

     #
     # This test verifies that the linker handles TBLOFFSET relocations.
     #
     run_dump_test cert0413a

     #
     # This test verifies that the linker handles PSVOFFSET relocations.
     #
     run_dump_test cert0414a
     run_dump_test cert0414b

     #    This   test   verifies  that   the   linker  handles   PBYTE
     # relocations.

     run_dump_test cert0415a

     #    This  test  verifies that  the  linker handles  PCREL_BRANCH
     # relocations.

     run_dump_test cert0416a

     #    This  test   verifies  that  the   linker  handles  PCREL_DO
     # relocations.

     run_dump_test cert0417a

     #    This  test  verifies that  the  linker handles  PGM_ADDR_LSB
     # relocations.

     run_dump_test cert0418a

     #    This   test   verifies  that   the   linker  handles   PWORD
     # relocations.

     run_dump_test cert0420a

     #    This test verifies that the linker handles SFR relocations.

     run_dump_test cert0425a

     #    This  test  verifies  that  the linker  handles  13-bit  SFR
     # relocs.

     run_dump_test cert0004

     #    This  test   verifies  that  the   linker  handles  SFR_BYTE
     # relocations.

     run_dump_test cert0426a

     #    This  test   verifies  that  the   linker  handles  SFR_WORD
     # relocations.

     run_dump_test cert0427a

     #    This test verifies that the linker handles SFR_WORD_WITH_DST
     # relocations.

     run_dump_test cert0428a

     #    This  test  verifies   that  the  linker  handles  SIGNED_10
     # relocations.

     run_dump_test cert0429a

     #    This  test verifies that  the linker  handles SIGNED_10_BYTE
     # relocations.

     run_dump_test cert0430a

     #    This  test  verifies  that  the linker  handles  UNSIGNED_14
     # relocations.

     run_dump_test cert0434a

     #    This  test  verifies  that  the  linker  handles  UNSIGNED_5
     # relocations.

     run_dump_test cert0435a

     #    This test verifies that the linker handles WORD relocations.

     run_dump_test cert0436a

     #    This   test  verifies  that   the  linker   handles  PSVPAGE
     # relocations.

     run_dump_test cert0437a

     #    This  test  verifies  that  the linker  handles  WORD_HANDLE
     # relocations.

     run_dump_test cert0438a

     #    This  test verifies that  the linker  handles WORD_PSVOFFSET
     # relocations.

     run_dump_test cert0439a
     run_stderr_test cert0439c ""

     #    This  test verifies that  the linker  handles WORD_TBLOFFSET
     # relocations.

     run_dump_test cert0440a
     run_dump_test cert0440b

     #    This  test  verifies that  the  linker handles  WORD_TBLPAGE
     # relocations

     run_dump_test cert0441a
     run_dump_test cert0441b
     run_stderr_test cert0441c ""
     run_stderr_test cert0441d ""

     #    This   test  verifies  that   the  linker   handles  RELBYTE
     # relocations.

     run_dump_test cert0442a
     run_dump_test cert0442b

     #    This   test  verifies  that   the  linker   handles  RELWORD
     # relocations.

     run_dump_test cert0443a
     run_dump_test cert0443b

     #    This   test  verifies  that   the  linker   handles  RELLONG
     # relocations.

     run_dump_test cert0444a
     run_dump_test cert0444b

	     ##########  END RELOCATION TESTS  ##########

     #    This test  verifies that  the linker handles  max/min values
     # for the -defsym command-line option.

     run_dump_test cert0044

     #    This  test verifies that  the linker  generates an  error or
     # warning  when we use  the -defsym  command-line option  with an
     # out-of-range parameter.  This functionality is not implemented.

     setup_kfail "pic30-*-*" "SSR_22029"
     run_stderr_test cert0045 ""

     #    This test verifies that  the linker does not allow undefined
     # symbols when we use the --no-undefined command-line option.

     run_stderr_test cert0052a ""

     #    This test  verifies that  the linker  supports the --oformat
     # option with coff-pic30 as the parameter.

     run_dump_test cert0055

     #    This test  verifies that the linker generates  an error when
     # we try to use the --oformat option with an unsupported target.

     run_stderr_test cert0057a ""
     run_stderr_test cert0057b ""

     #    This  test  verifies  that  the  --sort-common  command-line
     # option causes the linker to sort the common symbols by size.

     setup_kfail "pic30-*-*" "SSR_22024"
     run_map_test cert0059a ""

     #    This test  verifies that the linker assigns  space to common
     # symbols even if a relocatable  output file is specified with -r
     # when we use the -dc option.

     run_map_test cert0075a ""

     #    This test verifies that the linker sets the starting address
     # with the -e command-line option.

     run_dump_test cert0077a
     run_dump_test cert0077b

     #    This test  verifies that the linker generates  an error when
     # we use the -e command-line  option with a value greater than 32
     # bits wide.  This functionality is not implemented.

     setup_kfail "pic30-*-*" "SSR_22028"
     run_stderr_test cert0078a ""

     run_stderr_test ssr_20978a ""
     run_dump_test ssr_21675

     #    This test verifies that we can create a named PSV section.
     run_dump_test "ssr_26518-1"
}


}
