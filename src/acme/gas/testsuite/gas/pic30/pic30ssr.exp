# runtest --tool=gas --target=pic30-*-* ./gas/pic30/pic30cert.exp
################################################################################
#
# This is the certification test suite for the pic30 architecture.
#
#
# +----------------------------+----------------+----------+
# |                            |                |          |
# |          Element           |      Name      |   Date   |
# +----------------------------+----------------+----------+
# |                            |                |          |
# +----------------------------+----------------+----------+
# |Test procedures             |Jason Kajita    |   2002   |
# |                            |                |          |
# +----------------------------+----------------+----------+
# |Original 1.00 tests         |Jason Kajita    |   2002   |
# |                            |                |          |
# +----------------------------+----------------+----------+
# |1.00-to-1.10 conversion     |Dave German &   | May 2003 |
# |                            |Mehul Tamasi    |          |
# |                            |                |          |
# +----------------------------+----------------+----------+
# |1.10 tests                  |Jason Kajita    | May 2003 |
# |                            |                |          |
# +----------------------------+----------------+----------+
#
################################################################################
#
# This procedure will assemble the program specified by the tst_src argument.
# it will check the output to ensure that an error is generated.
#
proc run_expected_error { tst_src testname } {
   set x1 0
   set x2 0
   gas_start $tst_src ""
   while 1 {
      expect {
          -re "\[ \t\]*Assembler messages:\[^\n\]*\n" { set x1 1 }
          -re "\[ \t\]*Error: .*\[^\n\]*\n"           { set x2 1 }
          -re "\[^\n\]*\n"                    { }
          timeout                             { perror "timeout\n"; break }
          eof                                 { break }
      }
   }
   gas_finish
   if [all_ones $x1 $x2] then { pass $testname } else { fail $testname }
}

################################################################################
#
# This procedure  will test the  assembler to ensure that  all instructions
# are encoded properly.

proc run_isa_encoding { is_full srcdir subdir AS OBJDUMP } {
   if { $is_full } {
      set testname "ISA Encoding - full"
      set flag "-f"
   } else {
      set testname "ISA Encoding - partial"
      set flag "-p"
   }

   send_log "perl $srcdir/$subdir/isa_encoding.pl -asm $AS -dump $OBJDUMP $flag $srcdir/$subdir/isa.map\n"
   catch "exec perl $srcdir/lib/run $srcdir/$subdir/isa_encoding.pl -asm $AS -dump $OBJDUMP $flag $srcdir/$subdir/isa.map" comp_output

   send_log "$comp_output\n"

   if { [regexp "Errors found!" $comp_output] || \
        [regexp "Died" $comp_output] ||
     [regexp "not found" $comp_output] ||
        [regexp "Total Tests Completed = 0." $comp_output] } then {
      fail "$testname"
   } else {
      pass "$testname"
   }
}

################################################################################
#
# This procedure will ensure that an error is generated if the operands cannot
# be encoded.
#
proc run_invalid_operands_because_of_encoding { tst_cond tst_src } {
   set testname "invalid operands because of encoding - $tst_cond"
   set x1 0
   set x2 0
   gas_start $tst_src ""
   while 1 {
      expect {
          -re "\[ \t\]*Assembler messages:\[^\n\]*\n" { set x1 1 }
          -re "\[ \t\]*Error: Operands share encoding bits.  The operands must encode identically.\[^\n\]*\n"
                                                      { set x2 1 }
          -re "\[^\n\]*\n"                    { }
          timeout                             { perror "timeout\n"; break }
          eof                                 { break }
      }
   }
   gas_finish
   if [all_ones $x1 $x2] then { pass $testname } else { fail $testname }
}

################################################################################
#
# This procedure will ensure the assembler generates the correct stdout.
#
proc run_stdout_test { gasopt testname dfile sfile} {

     global subdir
     global srcdir

     gas_run "$sfile" "$gasopt" ">$dfile.stdout"
     if {[regexp_diff $dfile.stdout $srcdir/$subdir/$dfile]} then {
     fail $testname
     } else {
     pass $testname
     catch "exec $srcdir/lib/run rm $dfile.stdout" comp_output
     if ![string match "" $comp_output] then {
          send_log "$comp_output\n"
          verbose "$comp_output" 3
          }
     }
}

################################################################################
#
# This procedure will ensure the assembler generates the correct stderr.
#
proc run_stderr_test { gasopt testname dfile sfile} {

     global subdir
     global srcdir

     gas_run "$sfile" "$gasopt" "2>$dfile.stderr"
     if {[regexp_diff $dfile.stderr $srcdir/$subdir/$dfile]} then {
     fail $testname
     } else {
     pass $testname
     catch "exec $srcdir/lib/run rm $dfile.stderr" comp_output
     if ![string match "" $comp_output] then {
          send_log "$comp_output\n"
          verbose "$comp_output" 3
          }
     }
}

################################################################################
#
# This procedure will ensure the assembler generates the correct dependency info.
#
proc run_depend_test { gasopt testname dfile sfile} {

     global subdir
     global srcdir

     gas_run "$sfile" "-o dump.o $gasopt -MD $dfile.depend" ""
     if {[regexp_diff $dfile.depend $srcdir/$subdir/$dfile]} then {
     fail $testname
     } else {
     pass $testname
     catch "exec $srcdir/lib/run rm $dfile.depend" comp_output
     if ![string match "" $comp_output] then {
          send_log "$comp_output\n"
          verbose "$comp_output" 3
          }
     }

}

################################################################################
#
# This procedure checks for differences in the assembler-generated list files.
#
proc run_list_test { name listopt } {
     global subdir srcdir
     global AS
     global ASFLAGS
     global host_triplet

     if [string match "*/*" $name] {
     set file $name
     set name [file tail $name]
     } else {
     set file "$srcdir/$subdir/$name"
     }
     set opt_array [slurp_options "${file}.d"]
     if { $opt_array == -1 } {
     perror "error reading options from $file.d"
     unresolved $subdir/$name
     return
     }

     set opts(as) {}
     set opts(name) {}
     set opts(PROG) {}
     set opts(source) {}

     foreach i $opt_array {
     set opt_name [lindex $i 0]
     set opt_val [lindex $i 1]
     if ![info exists opts($opt_name)] {
          perror "unknown option $opt_name in file $file.d"
          unresolved $subdir/$name
          return
          }
     if [string length $opts($opt_name)] {
          perror "option $opt_name multiply set in $file.d"
          unresolved $subdir/$name
          return
          }
     set  opts($opt_name) $opt_val
     }

    if { $opts(name) == "" } {
    set testname "$subdir/$name"
    } else {
    set testname $opts(name)
    }

    if { $opts(source) == "" } {
    set sourcefile ${file}.s
    } else {
    set sourcefile $srcdir/$subdir/$opts(source)
    }

    send_log "$AS $ASFLAGS -a$listopt=$name\.lst $opts(as) $sourcefile\n"
    catch "exec $srcdir/lib/run $AS $ASFLAGS -a$listopt=$name.lst $opts(as) $sourcefile" comp_output
    set comp_output [prune_warnings $comp_output]
    if ![string match "" $comp_output] then {
    send_log "$comp_output\n"
    verbose "$comp_output" 3
    fail $testname
    return
    }

     if {[regexp_diff "./$name.lst" "$file.d"]} then {
     fail $testname
     } else {
     pass $testname
     catch "exec $srcdir/lib/run rm $name.lst" comp_output
     if ![string match "" $comp_output] then {
          send_log "$comp_output\n"
          verbose "$comp_output" 3
          }
     }
}

################################################################################
################   Certification Test Cases   ##################################
################################################################################

if [istarget pic30*-*-*] {

if (1) {

     verbose "\n\nBeginning 1.20 SSR Tests for PIC30 target..." 1

     run_list_test ssr22234 "l"

     run_stderr_test "" "SSR 22215 -- Error when the user has an odd value for new-lc in the .porg directive"\
       "ssr22215.d" "ssr22215.s"

     run_dump_test ssr18776a
     run_stderr_test "" "SSR 18776 -- Range checking for LDWLO"\
       "ssr18776b.d" "ssr18776b.s"

     run_stderr_test "" "SSR 20404 -- Error for invalid addressing mode"\
       "ssr20404a.d" "ssr20404a.s"
     run_list_test ssr20404b "l"

     run_dump_test ssr22056

     run_dump_test ssr22168

     run_list_test ssr22099 "hls"

     run_list_test ssr22140 "hls"

     run_stderr_test "" "SSR 22927 -- Restriction on word-only bit instructions not enforced"\
       "ssr22927.d" "ssr22927.s"

     run_list_test ssr18672 "hls"

     run_stderr_test "" "SSR 20934 -- Data-style references to code syms should cause error"\
       "ssr20934.d" "ssr20934.s"

################################################################################
     verbose "\n\nBeginning 1.30 SSR Tests for PIC30 target..." 1

     run_list_test ssr23342 "hls"

     run_stderr_test "" "SSR 24791: Bad code generated for goto $-2"\
       "ssr24791.d" "ssr24791.s"

     run_list_test ssr25957 "hls"

     run_dump_test ssr25982

     run_stderr_test "" "SSR 23694 -- W14 should not be accepted as destination for MUL instructions"\
       "ssr23694.d" "ssr23694.s"

     run_stderr_test "" "SSR 24183 -- Extraneous warning and error for .pincbin in non-code section"\
       "ssr24183.d" "ssr24183.s"

     run_stderr_test "" "SSR 24192 -- Improve error message for .incbin with negative (illegal) count"\
       "ssr24192.d" "ssr24192.s"

     run_stderr_test "" "SSR 24215 -- extraneous no error for non-existant include file"\
       "ssr24215.d" "ssr24215.s"

     # Provide second mnemonic for BRA EQ and BRA NEQ
     run_dump_test ssr23359

     run_stderr_test "" "SSR 23761 -- warning if assembler macros are redefined"\
       "ssr23761.d" "ssr23761.s"
################################################################################

################################################################################
     verbose "\n\nBeginning 1.33 SSR Tests for PIC30 target..." 1


################################################################################
  }
}
